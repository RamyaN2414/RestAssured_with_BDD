package api.StepDefination;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.github.javafaker.Faker;

import api.UserEndpoints.UserEndPoints;
import api.Utilities.FakerData;
import api.payload.User;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class User_test_Stepdefination {

	User userPayload;
	int ids;
	Faker faker = new Faker();

	FakerData fd = new FakerData();

	@Test(priority = 1)
	public void Api_using_post_Request() {
		userPayload = new User();
		userPayload = fd.fakerDataGenerator();
		Response response=UserEndPoints.crerateUser(userPayload);
  response.then().log().all();
  Assert.assertEquals(response.getStatusCode(), 201);
  //To pass the id from post to other tests we use jsonpath
  JsonPath jsonpasthEvaluator=response.jsonPath();
  ids=jsonpasthEvaluator.get("id");
  
  
	}
	
	@Test(priority=2)
	public void Api_using_get_Request() {
		Response response=UserEndPoints.getUser(ids);
		  response.then().log().all();
		  Assert.assertEquals(response.getStatusCode(), 200);

	}
	
	@Test(priority=4)
	public void Api_using_update_Requrest() {
		User userPayload=new User();
		userPayload.setName(faker.name().name());
		List<String> randomlist=new ArrayList<String>();
		randomlist.add("male");
		randomlist.add("female");
		int index= getRandomElement(randomlist);
		String gender=randomlist.get(index);
		userPayload.setGender(gender);
		userPayload.setEmail(faker.internet().emailAddress());
		List<String> randomlist1=new ArrayList<String>();
		randomlist1.add("Active");
		randomlist1.add("Inactive");
		int index1= getRandomElement(randomlist1);
		String status=randomlist.get(index1);
		userPayload.setStatus(status);
		
		Response response=UserEndPoints.updateUser(ids,userPayload);
		  response.then().log().all();
		  Assert.assertEquals(response.getStatusCode(), 200);
		
		
		
	}
	
	@Test(priority=4)
	public void Api_with_Delete_Request() {
		Response response=UserEndPoints.deleteUser(ids);
		  response.then().log().all();
		  Assert.assertEquals(response.getStatusCode(), 200);
	}
	
	
	

	private int getRandomElement(List<String> list) {
		// TODO Auto-generated method stub
		Random rand=new Random();
		return rand.nextInt(list.size());
	}
	
	
	
	
	
	
	
	
	
	
	
}
